name: Release Finch Daemon
on:
  workflow_dispatch:
  workflow_call:
env:
  GO_VERSION: '1.22.7'
permissions:
  contents: write
  deployments: write

jobs:
  get-latest-tag:
    name: Get the latest release tag
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.latest-tag.outputs.tag }}
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 0
      - name: 'Get the latest tag'
        id: latest-tag
        uses: "WyriHaximus/github-action-get-previous-tag@04e8485ecb6487243907e330d522ff60f02283ce" # v1.4.0

  generate-artifacts:
    needs: get-latest-tag
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]  # Use ubuntu-latest for both amd64 and arm64
        arch: [amd64, arm64]  # Define the architectures
    env:
      RELEASE_TAG: ${{ needs.get-latest-tag.outputs.tag }}
      DYNAMIC_BINARY_NAME: ''
      STATIC_BINARY_NAME: ''
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-tags: true
      - uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5.1.0
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false
      - name: 'Echo RELEASE_TAG ENV'
        run: echo ${{ env.RELEASE_TAG }}
      - name: Setup variables and release directories
        run: |
          export release_tag=${{ env.RELEASE_TAG }}
          export release_version=${release_tag/v/} # Remove v from tag name
          echo "DYNAMIC_BINARY_NAME=finch-daemon-${release_version}-linux-${{ matrix.arch }}.tar.gz" >> $GITHUB_ENV
          echo "STATIC_BINARY_NAME=finch-daemon-${release_version}-linux-${{ matrix.arch }}-static.tar.gz" >> $GITHUB_ENV

          mkdir release
      - name: Install Go licenses
        run: go install github.com/google/go-licenses@latest
      - name: Install Cross Arch dependencies
        run: |
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            sudo apt update
            sudo apt install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          fi
      - name: Create Third Party Licences File
        run: make licenses
      - name: setup static dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libc6-dev -f
      - name: Create release binaries
        run: |
          if [ "${{ matrix.arch }}" = "amd64" ]; then
              make TARGET_ARCH=${{ matrix.arch }} RELEASE_TAG=$RELEASE_TAG release
          elif [ "${{ matrix.arch }}" = "arm64" ]; then
              make CC=aarch64-linux-gnu-gcc TARGET_ARCH=${{ matrix.arch }} RELEASE_TAG=$RELEASE_TAG release
          fi
      - name: Verify Release version
        run: |
          mkdir -p output/static output/dynamic
          tar -xzf release/${{ env.DYNAMIC_BINARY_NAME }} -C ./output/dynamic
          tar -xzf release/${{ env.STATIC_BINARY_NAME }} -C ./output/static
        shell: bash
      - uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ matrix.arch }}
          path: release/
          if-no-files-found: error
    outputs:
      release_tag: ${{ env.RELEASE_TAG }}
      dynamic_binary_name: ${{ env.DYNAMIC_BINARY_NAME }}
      static_binary_name: ${{ env.STATIC_BINARY_NAME }}

  validate-artifacts:
    needs: generate-artifacts
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]  # Use ubuntu-latest for both amd64 and arm64
        arch: [amd64, arm64]  # Define the architectures
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: artifacts-${{ matrix.arch }}
          path: release/
      - run: bash scripts/verify-release-artifacts.sh ${{ needs.generate-artifacts.outputs.release_tag }}
        env:
          TARGET_ARCH: ${{ matrix.arch }}
  create-release:
    needs: [generate-artifacts, validate-artifacts]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]  # Use ubuntu-latest for both amd64 and arm64
        arch: [amd64, arm64]  # Define the architectures
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: artifacts-${{ matrix.arch }}
      - uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.generate-artifacts.outputs.release_tag }}
          prerelease: false
          generate_release_notes: false
          files: |
            ${{ needs.generate-artifacts.outputs.dynamic_binary_name }}
            ${{ needs.generate-artifacts.outputs.dynamic_binary_name }}.sha256sum
            ${{ needs.generate-artifacts.outputs.static_binary_name }}
            ${{ needs.generate-artifacts.outputs.static_binary_name }}.sha256sum
